= A Unix-like Programming Environment
Oleksandr Shturmov <oleks@oleks.info>
v1.0, July 31, 2015
:toc:
:sectnums:
:sectanchor:

The purpose of this tutorial is to introduce you to a philosophy of using the
computer.

This philosophy is likely to be different from what you are accustomed to; and
yet, it stands on the shoulders of the humble pioneers of many modern operating
systems and programming environments.

The reason that this way of using a computer is not in wide-spread adoption is
perhaps due to:

. a general public disinterest in computer programming,
. a fondness of the general public of
http://en.wikipedia.org/wiki/Graphical_user_interface[graphical user
interfaces], and
. the resulting sectaraniasm of those who practice what we preach.

////
This tutorial is in close spirit with the popular book "The UNIX Programming
Environment", by Brian W. Kernighan and Rob Pike, Prentice Hall, 1984, and
serves perhaps as a modern introduction to the book, should you choose to read
it.
////
////
This tutorial is by no means comprehensive, and is not intended as a reference
beyond its philosophical considerations. As part of the tutorial, we will try
to point you to materials for further study.
////

== The Bits of History

UNIX® is trademark of http://www.unix.org/what_is_unix.html[The Open Group],
who stand to certify products which conform to the
http://www.unix.org/online.html[Single UNIX Specification]. Colloquially
however, "Unix" refers to a family of operating systems developed at Bell Labs
in the 1970s, and their countless descendants.

A 1982 Bell Labs video, recently made available under the AT&T Archives,
starring such pioneers as Ken Thompson, Dennis Ritchie, and Brian W. Kernighan,
gives further insight into what the original UNIX systems were like—the
philosophy and history behind them:

++++
<center><iframe width="640" height="480"
src="https://www.youtube.com/embed/XvDZLjaCJuw" frameborder="0"
allowfullscreen></iframe></center>
<br/>
++++

An important aspect of the history of UNIX is that it has always been guided by
the needs of its users and programmers. This goal, quite incidentally, results
in a philosophy:

[quote, Brian W. Kernigan and Rob Pike, "The UNIX Programming Environment, Prentice Hall, 1984"]
____
Even though the UNIX system introduces a number of innovative programs and
techniques, no single program or idea makes it work well. Instead, what makes
it effective is an approach to programming, a philosophy of using the computer.
Although that philosophy can't be written down in a single sentence, at its
heart is the idea that the power of a system comes more from the relationships
among programs than from the programs themselves. Many UNIX programs do quite
trivial tasks in isolation, but, combined with other programs, become general
and useful tools.
____

A Unix-like programming environment is ultimately about *freedom*: the freedom
to choose how to structure your programming environment. It is how you choose
to combine the programs we discuss below that determines the structure,
benefits, and efficiency of your programming environment.

For pedagogical reasons, we won't endorse this freedom to it's utopian extent:
you will work on predefined programming projects, with predeclared programming
conventions. This tutorial exists to emphasize that other programming
environments might be very well be much more suitable to your intents. Of
course, we do retain _some_ degrees of freedom, such as the choice of text
editor.

////

Later, so-called Integrated Development Environments (IDEs) emerged, the most
popular today being perhaps http://www.eclipse.org/[Eclipse],
https://developer.apple.com/xcode/[Xcode], and
https://www.visualstudio.com/[Visual Studio] (no marketing intended). The
history of IDEs goes far beyond these modern giants, but perhaps a unifying
theme for all of them has been to offer an integrated text editor, compiler,
debugger, build system, and more.

A Unix-like programming environment keeps these things separate, but lets you bind them as you find most convenient (rather than force a development environment upon you).

There are two problems with the IDE approach. First, they have a steep learning curve. It is hard to limit

////

== Hello, Terminal

The crux of a Unix-like programming environment is a Unix-like command-line
interface with the operating system, often referred to as a "shell" or
"terminal".

A https://en.wikipedia.org/wiki/Command-line_interface[command-line interface
(CLI)] interprets textual commands, rather than e.g.  mouse clicks or gestures.
A CLI presents the user with a line where they can enter text, and prompts the
user to enter a command. The user can then type away at the keyboard, and
finally type ↵ to "enter" the command. The CLI will then respond by executing
the command, which may or may not have some directly observable effect, and
perhaps, eventually, present the user with another prompt.

For instance, recall the Moscow ML CLI from the time you had Introduction to
Programming:

----
Moscow ML version ...
Enter `quit();' to quit.
- 5+5;
> val it = 10 : int
- 
----

Here, the user is prompted to enter a command by a dash (`-`), followed by a
space:  When you see a line starting with a prompt, you know MoscowML is
waiting for you to enter a command.

Another CLI you might already be familiar with is the Python CLI:

----
Python ...
Type "help", "copyright", "credits" or "license" for more information.
>>> 5+5
10
>>>
----

Here, the prompt is 3 chevrons (`>>>`), followed by a space.

The prompt of a Unix-like "terminal" or "shell" is typically a dollar sign
(very American!), followed by a space. As with MoscowML and Python, the
commands you type into a shell are written in a particular "shell programming
language". The first thing that this language lets you do is execute the
programs stored on your computer. For instance, the program `echo` simply
prints its argument back to the user:

----
$ echo 10
10
$ 
----

Many systems will prepend the dollar with some contextual information, such as
the current working directory, the name of the machine (hostname), and the user
you are working as. For instance,

----
student@laptop:~/ark/$ echo 10
10
student@laptop:~/ark/$ 
----

*Note:* On Unix-like systems, `~` stands for the home directory of the current
user.

We say that this prompt has the following format:

----
<user>@<hostname>:<cwd>$
----

Where `<cwd>` stands for current working directory: A shell, like any other
program, is always working from the point of view of a particular directory in
your file system.  The current working directory is important when dealing with
commands that deal with files.

Some other things you might do at the terminal is launch a MoscowML CLI:

----
$ mosml
Moscow ML version ...
Enter `quit();' to quit.
- 5+5;
> val it = 10 : int
- quit();
$ 
----

Or launch a Python CLI:

----
$ python
Python ...
Type "help", "copyright", "credits" or "license" for more information.
>>> 5+5
10
>>> quit()
$
----

Now let's get you started at a terminal on your own system.

////

=== Ubuntu

http://www.ubuntu.com/[Ubuntu] is a https://www.debian.org/[Debian]-based
https://en.wikipedia.org/wiki/Linux[Linux] operating system. At its core is the
https://en.wikipedia.org/wiki/Linux_kernel[Linux kernel], a Unix-like operating
system kernel, originally conceived by
https://en.wikipedia.org/wiki/Linus_Torvalds[Linus Torvalds] in 1991. The Linux
kernel is the https://www.youtube.com/watch?v=L2SED6sewRw[fastest moving]
https://en.wikipedia.org/wiki/Open_source[Open-Source] project known to man,
which is still in very active development.  There are many
https://en.wikipedia.org/wiki/Linux_distribution[Linux distributions] out
there, Debian being just one of the more popular ones.  Ubuntu was designed to
make Linux more accessible to the general public.

Search for the program called "Terminal", and launch the application.

====

**EXERCISE**

Try using the `echo` and `python` commands as we did above. If you (still) have
MoscowML installed, try using `mosml`. Python ships by default with Ubuntu.

====

=== OS X

https://en.wikipedia.org/wiki/OS_X[OS X], originally named Mac OS X is the
family of operating systems shipped with http://www.apple.com/[Apple] laptops,
desktop computers, and servers. The "X" marks the transition from the original
Mac OS to a
https://en.wikipedia.org/wiki/Berkeley_Software_Distribution[BSD]-based
operating system in 2001. The BSD family of Unix-like operating systems was
originally conceived at
https://en.wikipedia.org/wiki/University_of_California,_Berkeley[University of
California, Berkeley] in the late 1970s.

Use Spotlight to search for the program called "Terminal", and launch the
application.

A typical OS X prompt is formatted as follows:

----
<hostname>:<cwd> <user>$
----

====

**EXERCISE**

Try using the `echo` and `python` commands as we did above. If you (still) have
MoscowML installed, try using `mosml`. Python ships by default with OS X.

====

=== Windows

For historical reasons, the Windows shell is substantially different from a
Unix-like shell.


=== Other

If you're reading this tutorial on a handheld device, you are out of luck. The
iOS and Android operating systems are too uptight for us to set up a truly
Unix-like programming environment. Besides, programming on a handheld device is
somewhat obnoxious.

If you're reading this on your personal computer and using something other than
Ubuntu, OS X, or Windows, chances are, you are already familiar with a
Unix-like terminal(if not, let us know!), and you can skip directly to
<<text-editors>>.

////

== Hello, Linux

Although it is possible to set up a Unix-like programming environment in both
OS X and Windows (install Xcode with command-line tools on OS X, install cygwin
on Windows), the options available will not give us a unified approach.

The sort of things we'll do vary across these families of operating systems,
even though the concepts stay the same. We would be forced to have a Linux, OS
X, and Windows track in (almost) all our tutorials and assignments.  This would
not be very pedagogical, not to mention, time consuming and fragile!

Instead, we'll focus on Linux. The reason we choose Linux is that the insides
of a Linux-based operating system are often both open-source and (publicly)
well-documented. Something we can't say about either OS X and Windows at the
time of writing. Last, but not least, many Linux's are free.

If not already running Linux, we recommend that you either install a native
Linux partition in your spare time (we recommend Arch Linux) or install
VirtualBox in your host operating system, and run Linux in a virtual machine.
We've already prepared a VirtualBox image for you.

== Documenting Shell Commands

Although we used screenshots above to guide you to a terminal, this was the
first and last time that we use screenshots: One of the benefits of dealing
with a command-line interface is that it does not require the use of
screenshots to document program interactions. All you need to document a CLI is
text. This also makes it easy for the reader to copy/paste the shell commands
into their own terminal.

You are similarly **strongly discouraged** in the use of screenshots for
documenting your own work.

The shell prompt we will typically use will be formatted as follows:

----
<cwd>$ 
----

The current working directory will (almost) always start with `~/ark/`. In your
case, `~` might refer to your home directory or some other directory. For
instance, you might already have a `Documents` directory in your home directory
and a `DIKU` directory in there. Then you can freely understand `~` as
`~/Documents/DIKU/`, should you find it more convenient.

== Working with Directories and Files

Let us create that infamous `ark` directory in our home (`~`) directory.

----
~$ mkdir ark
----

To change the current working directory, use the `cd` command:

----
~$ cd ark
~/ark$ 
----

To go up in the directory structure, we need to type `..` as destination.

----
~/ark$ cd ..
$ 
----

----
$ mkdir ark/unix
$ cd ark/unix
~/ark/unix$ 
----

We can use `ls` to list the contents of a directory. You probably have 


== Installing Software

=== Linux

=== Mac OS

=== Windows

== Text-editors

== Other Text Processing Utilities

== Automating Your Workflows With Shell Scripts

Repetitive tasks can be grouped together.

``Button pushers can be easily replaced.''

You might be familiar with this due to the concept of "macros" in products like
Microsoft Office and LibreOffice.

video::2kEJoWfobpA[youtube]

== Further Study

. Eric Steven Raymond. _The Art of Unix Programming_.
http://www.catb.org/~esr/writings/taoup/html/index.html. Revision 1.0,
September 2003.

Windows: Install cygwin, ignore the signature (not very secure anyhow), choose
Donwload Site (any will do).
